{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,mCAgBMC,EAAmB,kPAeXC,EAAAC,cAXW,CACrBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2EACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBARjB,MAYMC,EAAKC,EAAAC,cAELC,EAAWF,EAAAG,IAAIJ,EAAIX,GA2DxB,iBAEsBF,EAAAkB,IAAIC,aAAa,CACpCC,OAAQC,SAASC,eAAe,eAChCC,GAAI,kBAFN,MAKMC,QAAgBxB,EAAAkB,IAAIO,cAAc,CACtCC,OAAQxB,EACRyB,aAAc,6CACdJ,GAAI,mBAGNT,EAAAc,IAAIZ,GAAUa,MAAMC,IAClB,GAAIA,EAASC,SAAU,CACrB,MACMC,EAzEZ,SAAqBC,GACnB,IAAIC,EAAO,GACPC,EAAkB,GACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAWI,OAAQD,IAAK,CAC1C,IAAIE,EAAaL,EAAWG,GAAGb,GAC/B,GAAIW,EAAKK,SAASD,QAAqB,CACrC,IAAIE,EAAY,GAChBA,EAAUC,KAAKR,EAAWG,GAAGM,MAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAWI,OAAQM,IACrC,GAAIL,GAAcL,EAAWU,GAAGpB,GAAI,CAClC,IAAIqB,EAAMX,EAAWU,GAAGE,MAEA,SAAtBZ,EAAWU,GAAGD,MACQ,OAAtBT,EAAWU,GAAGD,MACQ,QAAtBT,EAAWU,GAAGD,MACQ,OAAtBT,EAAWU,GAAGD,MACQ,cAAtBT,EAAWU,GAAGD,OAEdE,EAAME,OAAOF,IAEfJ,EAAUC,KAAKG,GAInB,GAAoB,SAAhBJ,EAAU,GAAe,CAC3BA,EAAUO,QACV,IAAIC,EAAIR,EAAUH,OAClBG,EAAYA,EAAUS,QAAO,CAACC,EAAGC,IAAMD,EAAIC,IAC3CX,GAAwBQ,EACxBR,EAAYY,KAAKC,MAAkB,GAAZb,GAAkB,QACpC,GAAoB,OAAhBA,EAAU,GACnBA,EAAUO,QACNC,EAAIR,EAAUH,OAClBG,EAAYA,EAAUS,QAAO,CAACC,EAAGC,IAAMD,EAAIC,IAC3CX,EAAYc,SAASd,EAAYQ,QAC5B,GAAoB,cAAhBR,EAAU,GAAoB,CACvCA,EAAUO,QACV,MAAMQ,EAAQ,GACdf,EAAUgB,SAASC,IACjBF,EAAME,IAAYF,EAAME,IAAY,GAAK,KAE3C,IAAIC,EAAWC,OAAOzB,KAAKqB,GAAON,QAAO,SAAUC,EAAGC,GACpD,OAAOI,EAAML,GAAKK,EAAMJ,GAAKD,EAAIC,KAEnCX,EAAYoB,OAAOF,OACM,SAAhBlB,EAAU,KACnBA,EAAYA,EAAU,IAGxBL,EAAgBG,GAAcE,EAEhCN,EAAKO,KAAKH,GAEZ,OAAOH,EAoBmB0B,CADTF,OAAOG,OAAOhC,EAASc,QAE9BV,EAAOyB,OAAOzB,KAAKF,GACnB8B,EAASH,OAAOG,OAAO9B,GAC7B,IAAK,IAAII,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,CACxBZ,EAAQuC,iBAAiB7B,EAAKE,IACpCS,MAAQiB,EAAO1B,GACrBZ,EAAQwC,iBACRxC,EAAQyC,kBAGVC,QAAQC,IAAI,wBAEbC,OAAOC,IACRH,QAAQG,MAAMA,MAEhBrE,EAAAkB,IAAIoD,YAAYtE,EAAAuE,UAAUC,QAAQC,oBAAqBC,IACrDR,QAAQC,IAAIO,YAGRlD,EAAQyC,aAnCf","sources":["src/scripts/index.js"],"sourcesContent":["import {\r\n    api,\r\n    EVENTTYPE\r\n  } from \"@shapediver/viewer\";\r\n  import {\r\n    initializeApp\r\n  } from \"firebase/app\";\r\n  import {\r\n    getDatabase,\r\n    ref,\r\n    set,\r\n    push,\r\n    onValue,\r\n    get\r\n  } from \"firebase/database\"\r\n\r\n  var shapediverTicket = \"3c97709d88a4f2768a3477791134a231261629d2c30c1bf3891a9ba5ffb222a219d440398df6830735b52ea8730d25ca47a46c313f05d77c39e63fc5a35d5eb4d56b9a4735d75eb373dab6d5fa9738453574a7f1bcd5c5eee42e5688cb348fa77a15c4a221cb4d-f7e41cbaba79e6dc66a529c582d355ab\";\r\n  \r\n  // Your web app's Firebase configuration\r\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyDWH9hQgvCs8sNilPPqFv4J2tlbs62tgjw\",\r\n    authDomain: \"designcolab-1917d.firebaseapp.com\",\r\n    databaseURL: \"https://designcolab-1917d-default-rtdb.europe-west1.firebasedatabase.app\",\r\n    projectId: \"designcolab-1917d\",\r\n    storageBucket: \"designcolab-1917d.appspot.com\",\r\n    messagingSenderId: \"929002738141\",\r\n    appId: \"1:929002738141:web:60deb9e461a512782ca634\",\r\n    measurementId: \"G-C0Y34DJ5MK\"\r\n  };\r\n  \r\n  const app = initializeApp(firebaseConfig);\r\n  const db = getDatabase();\r\n  \r\n  const refrence = ref(db, shapediverTicket)\r\n  \r\n  function convertData(parameters) {\r\n    var keys = [];\r\n    var processedParams = {};\r\n    for (let i = 0; i < parameters.length; i++) {\r\n      let currentKey = parameters[i].id;\r\n      if (keys.includes(currentKey)) {} else {\r\n        var valueList = [];\r\n        valueList.push(parameters[i].type);\r\n        for (let j = 0; j < parameters.length; j++) {\r\n          if (currentKey == parameters[j].id) {\r\n            var val = parameters[j].value;\r\n            if (\r\n              parameters[j].type == \"Float\" ||\r\n              parameters[j].type == \"Int\" ||\r\n              parameters[j].type == \"Even\" ||\r\n              parameters[j].type == \"Odd\" ||\r\n              parameters[j].type == \"StringList\"\r\n            ) {\r\n              val = Number(val);\r\n            }\r\n            valueList.push(val);\r\n          } else {}\r\n        }\r\n        //HEre i have all the values in an array\r\n        if (valueList[0] == \"Float\") {\r\n          valueList.shift();\r\n          var l = valueList.length;\r\n          valueList = valueList.reduce((a, b) => a + b);\r\n          valueList = valueList / l;\r\n          valueList = Math.round(valueList * 10) / 10\r\n        } else if (valueList[0] == \"Int\") {\r\n          valueList.shift();\r\n          var l = valueList.length;\r\n          valueList = valueList.reduce((a, b) => a + b);\r\n          valueList = parseInt(valueList / l);\r\n        } else if (valueList[0] == \"StringList\") {\r\n          valueList.shift();\r\n          const count = {};\r\n          valueList.forEach((element) => {\r\n            count[element] = (count[element] || 0) + 1;\r\n          });\r\n          var valCount = Object.keys(count).reduce(function (a, b) {\r\n            return count[a] > count[b] ? a : b;\r\n          });\r\n          valueList = String(valCount);\r\n        } else if (valueList[0] == \"Color\"){\r\n          valueList = valueList[1]\r\n        }\r\n  \r\n        processedParams[currentKey] = valueList;\r\n      }\r\n      keys.push(currentKey);\r\n    }\r\n    return processedParams\r\n  }\r\n  \r\n  \r\n  (async () => {\r\n    // create a viewer\r\n    const viewer = await api.createViewer({\r\n      canvas: document.getElementById(\"canvasIndex\"),\r\n      id: \"myViewerIndex\",\r\n    });\r\n    // create a session\r\n    const session = await api.createSession({\r\n      ticket: shapediverTicket ,\r\n      modelViewUrl: \"https://sdeuc1.eu-central-1.shapediver.com\",\r\n      id: \"mySessionIndex\",\r\n    });\r\n  \r\n    get(refrence).then((snapshot) => {\r\n      if (snapshot.exists()) {\r\n        const data = Object.values(snapshot.val())\r\n        const convertedData = convertData(data)\r\n        const keys = Object.keys(convertedData)\r\n        const values = Object.values(convertedData)\r\n        for (let i = 0; i < keys.length; i++) {\r\n          var param = session.getParameterById(keys[i])\r\n          param.value = values[i]\r\n          session.commitParameters;\r\n          session.customize();\r\n        }\r\n      } else {\r\n        console.log(\"No data available\");\r\n      }\r\n    }).catch((error) => {\r\n      console.error(error);\r\n    });\r\n    api.addListener(EVENTTYPE.SESSION.SESSION_CUSTOMIZED, (e) => {\r\n      console.log(e);\r\n    });\r\n  \r\n    await session.customize();\r\n  })();"],"names":["$bHyGd","parcelRequire","$cba3eb2abed8e80a$var$shapediverTicket","$fXOuZ","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","$cba3eb2abed8e80a$var$db","$8tedJ","getDatabase","$cba3eb2abed8e80a$var$refrence","ref","api","createViewer","canvas","document","getElementById","id","session","createSession","ticket","modelViewUrl","get","then","snapshot","exists","convertedData","parameters","keys","processedParams","i","length","currentKey","includes","valueList","push","type","j","val","value","Number","shift","l","reduce","a","b","Math","round","parseInt","count","forEach","element","valCount","Object","String","$cba3eb2abed8e80a$var$convertData","values","getParameterById","commitParameters","customize","console","log","catch","error","addListener","EVENTTYPE","SESSION","SESSION_CUSTOMIZED","e"],"version":3,"file":"index.e1ce5129.js.map"}